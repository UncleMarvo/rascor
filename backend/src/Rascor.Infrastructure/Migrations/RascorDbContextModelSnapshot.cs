// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rascor.Infrastructure.Data;

#nullable disable

namespace Rascor.Infrastructure.Migrations
{
    [DbContext(typeof(RascorDbContext))]
    partial class RascorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rascor.Domain.Entities.RamsAcceptance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("AcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accepted_at");

                    b.Property<string>("ChecklistResponses")
                        .HasColumnType("text")
                        .HasColumnName("checklist_responses");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("device_info");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip_address");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("RamsDocumentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rams_document_id");

                    b.Property<string>("SignatureData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("signature_data");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<string>("WorkAssignmentId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("work_assignment_id");

                    b.HasKey("Id");

                    b.HasIndex("RamsDocumentId");

                    b.HasIndex("SiteId");

                    b.HasIndex("WorkAssignmentId");

                    b.HasIndex("UserId", "SiteId", "AcceptedAt");

                    b.HasIndex("UserId", "WorkAssignmentId", "RamsDocumentId")
                        .IsUnique();

                    b.ToTable("rams_acceptances", (string)null);
                });

            modelBuilder.Entity("Rascor.Domain.Entities.RamsChecklistItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("item_type");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("label");

                    b.Property<string>("RamsDocumentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rams_document_id");

                    b.Property<string>("Section")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("section");

                    b.Property<string>("ValidationRules")
                        .HasColumnType("text")
                        .HasColumnName("validation_rules");

                    b.HasKey("Id");

                    b.HasIndex("RamsDocumentId", "DisplayOrder");

                    b.ToTable("rams_checklist_items", (string)null);
                });

            modelBuilder.Entity("Rascor.Domain.Entities.RamsDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PdfBlobUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("pdf_blob_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("WorkTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("work_type_id");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("WorkTypeId", "Version")
                        .IsUnique();

                    b.ToTable("rams_documents", (string)null);
                });

            modelBuilder.Entity("Rascor.Domain.Entities.WorkAssignment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assigned_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_end_date");

                    b.Property<DateTime?>("ExpectedStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_start_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<string>("WorkTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("work_type_id");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("Status");

                    b.HasIndex("WorkTypeId");

                    b.HasIndex("UserId", "SiteId");

                    b.ToTable("work_assignments", (string)null);
                });

            modelBuilder.Entity("Rascor.Domain.Entities.WorkType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("work_types", (string)null);
                });

            modelBuilder.Entity("Rascor.Domain.GeofenceEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("event_type");

                    b.Property<double?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("SiteId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_id");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("geofence_events", (string)null);
                });

            modelBuilder.Entity("Rascor.Domain.Site", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<double>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("RadiusMeters")
                        .HasColumnType("integer")
                        .HasColumnName("radius_meters");

                    b.HasKey("Id");

                    b.ToTable("sites", (string)null);
                });

            modelBuilder.Entity("Rascor.Domain.UserAssignment", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_id");

                    b.Property<string>("SiteId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("site_id");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.HasKey("UserId", "SiteId");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("Rascor.Domain.Entities.RamsAcceptance", b =>
                {
                    b.HasOne("Rascor.Domain.Entities.RamsDocument", "RamsDocument")
                        .WithMany("Acceptances")
                        .HasForeignKey("RamsDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rascor.Domain.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rascor.Domain.Entities.WorkAssignment", "WorkAssignment")
                        .WithMany("RamsAcceptances")
                        .HasForeignKey("WorkAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RamsDocument");

                    b.Navigation("Site");

                    b.Navigation("WorkAssignment");
                });

            modelBuilder.Entity("Rascor.Domain.Entities.RamsChecklistItem", b =>
                {
                    b.HasOne("Rascor.Domain.Entities.RamsDocument", "RamsDocument")
                        .WithMany("ChecklistItems")
                        .HasForeignKey("RamsDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RamsDocument");
                });

            modelBuilder.Entity("Rascor.Domain.Entities.RamsDocument", b =>
                {
                    b.HasOne("Rascor.Domain.Entities.WorkType", "WorkType")
                        .WithMany("RamsDocuments")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Rascor.Domain.Entities.WorkAssignment", b =>
                {
                    b.HasOne("Rascor.Domain.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Rascor.Domain.Entities.WorkType", "WorkType")
                        .WithMany("WorkAssignments")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Rascor.Domain.Entities.RamsDocument", b =>
                {
                    b.Navigation("Acceptances");

                    b.Navigation("ChecklistItems");
                });

            modelBuilder.Entity("Rascor.Domain.Entities.WorkAssignment", b =>
                {
                    b.Navigation("RamsAcceptances");
                });

            modelBuilder.Entity("Rascor.Domain.Entities.WorkType", b =>
                {
                    b.Navigation("RamsDocuments");

                    b.Navigation("WorkAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
